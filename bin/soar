#!/usr/bin/env bash

##################################################################################################
## 
## FUNCTIONS
## 
##################################################################################################

###
# Display command help
## 
function display_help {
    echo "Soar"
    echo
    echo "${YELLOW}Usage:${NC}" >&2
    echo "  soar COMMAND [options] [arguments]"
    echo
    echo "Unknown commands are passed to the docker-compose binary."
    echo
    echo "${YELLOW}docker-compose Commands:${NC}"
    echo "  ${GREEN}soar up${NC}               Start the application"
    echo "  ${GREEN}soar up -d${NC}            Start the application in the background"
    echo "  ${GREEN}soar stop${NC}             Stop the application"
    echo "  ${GREEN}soar restart${NC}          Restart the application"
    echo "  ${GREEN}soar ps${NC}               Display the status of all containers"
    echo
    echo "${YELLOW}Symfony Console Commands:${NC}"
    echo "  ${GREEN}soar console ...${NC}      Run a console command"
    echo
    is_magento
    if [ "$?" -eq 0 ]; then
    echo "${YELLOW}Magento Cli Commands:${NC}"
    echo "  ${GREEN}soar magento ...${NC}      Run a magento command"
    echo "  ${GREEN}soar magento install${NC}  Install magento with values from ENV vars"
    echo "  ${GREEN}soar magento clean${NC}    Clear all magento generated files"
    echo
    fi
    echo "${YELLOW}Composer Commands:${NC}"
    echo "  ${GREEN}soar composer ...${NC}     Run a Composer command"
    echo
    echo "${YELLOW}Vendor Bin Commands:${NC}"
    echo "  ${GREEN}soar bin ...${NC}          Run a vendor bin command"
    echo
    echo "${YELLOW}Database Commands:${NC}"
    echo "  ${GREEN}soar db${NC}               Open database cli client"
    echo "  ${GREEN}soar db import ...${NC}    Import a database dump"
    echo "  ${GREEN}soar db dump ...${NC}      Dump a database"
    echo
    echo "${YELLOW}Shell Commands:${NC}"
    echo "  ${GREEN}soar shell ...${NC}        Open bash session in container. Default php"
    echo

    exit 1
}

###
# Check if this is a magento application
## 
function is_magento {
    # check if bin/magento is available
    $DOCKER_COMPOSE_EXEC -T $DOCKER_PHP_SERVICE bin/magento -V >/dev/null
    return $?
}

###
# Check if bash is available in a container
## 
function has_bash {
    CONTAINER=$1
    # check if bash is available
    $DOCKER_COMPOSE_EXEC -T $CONTAINER bash --version >/dev/null
    return $?
}

##################################################################################################
## 
## INIT SCRIPT
## 
##################################################################################################

###
# Verify operating system is supported...
##
UNAMEOUT="$(uname -s)"
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Laravel Sail supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

###
# Determine if stdout is a terminal...
##
if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

##################################################################################################
## 
## INIT TOOLS
## 
##################################################################################################

###
# Determine docker compose binary
##
if docker compose &> /dev/null; then
    DOCKER_COMPOSE="docker compose"
else
    DOCKER_COMPOSE="docker-compose"
fi
DOCKER_COMPOSE_EXEC="$DOCKER_COMPOSE exec"

###
# Determine user to run commands as
##
if [ "$APP_USER" != "" ]; then
    EXEC_USER="--user=$APP_USER "
else
    EXEC_USER=""
fi

###
# Determine pv binary (optional)
##
PV_BIN=`which pv`

##################################################################################################
## 
## ENV VARIABLES
## 
##################################################################################################

###
# Source the .env file
##
if [ -n "$APP_ENV" ] && [ -f ./.env."$APP_ENV" ]; then
  source ./.env."$APP_ENV";
elif [ -f ./.env ]; then
  source ./.env;
fi

export DOCKER_PHP_SERVICE=${DOCKER_PHP_SERVICE:-"php"}
export DOCKER_DB_SERVICE=${DOCKER_DB_SERVICE:-"db"}
export DOCKER_WEB_SERVER_SERVICE=${DOCKER_WEB_SERVER_SERVICE:-"nginx"}

export USER=${USER:-$UID}
export GROUP=${GROUP:-$(id -g)}

##################################################################################################
## 
## DETERMINE COMMAND TO EXECUTE
## 
##################################################################################################

## HELP
if [ $# -eq 0 ] || [ "$1" == "help" ] || [ "$1" == "--help" ]; then
    display_help

## COMPOSER
elif [ "$1" == "composer" ]; then
    shift 1
    $DOCKER_COMPOSE_EXEC $EXEC_USER -T $DOCKER_PHP_SERVICE composer $@

## SYMFONY
elif [ "$1" == "console" ]; then
    shift 1
    $DOCKER_COMPOSE_EXEC $EXEC_USER -T $DOCKER_PHP_SERVICE ./bin/console $@

## MAGENTO
elif [ "$1" == "magento" ] && [ "$2" == "install" ]; then
    shift 2
    $DOCKER_COMPOSE_EXEC $EXEC_USER -T $DOCKER_PHP_SERVICE ./bin/magento setup:install \
        --db-host=$MYSQL_HOST \
        --db-name=$MYSQL_DATABASE \
        --db-user=$MYSQL_USER \
        --db-password=$MYSQL_PASSWORD \
        --admin-user=$MAGENTO_ADMIN_USERNAME \
        --admin-password=$MAGENTO_ADMIN_PASSWORD \
        --admin-email=$MAGENTO_ADMIN_EMAIL \
        --admin-firstname=$MAGENTO_ADMIN_FIRSTNAME \
        --admin-lastname=$MAGENTO_ADMIN_LASTNAME \
        --search-engine=opensearch \
        --opensearch-host=$OPENSEARCH_HOST \
        --opensearch-enable-auth 0 \
        --backend-frontname=admin

elif [ "$1" == "magento" ] && [ "$2" == "clean" ]; then
    shift 2
    $DOCKER_COMPOSE_EXEC $EXEC_USER -T $DOCKER_PHP_SERVICE rm -rf \
        var/cache/ \
        var/page_cache/ \
        var/view_preprocessed \
        var/di \
        var/generation \
        generated \
        pub/static/frontend/* \
        pub/static/adminhtml/*

elif [ "$1" == "magento" ]; then
    shift 1
    $DOCKER_COMPOSE_EXEC $EXEC_USER -T $DOCKER_PHP_SERVICE ./bin/magento $@

## VENDOR BIN
elif [ "$1" == "bin" ]; then
    VENDOR_BIN=$2
    shift 2
    $DOCKER_COMPOSE_EXEC $EXEC_USER -T $DOCKER_PHP_SERVICE ./vendor/bin/$VENDOR_BIN $@

## DATABASE
elif [ "$1" == "db" ] && [ "$2" == "import" ]; then
    DUMPFILE=$3
    shift 3
    COMMAND="$DOCKER_COMPOSE_EXEC -T $DOCKER_DB_SERVICE mysql -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE $@"
    if [[ "$DUMPFILE" =~ *.gz ]]; then
        CAT_BIN=zcat
    else
        CAT_BIN=cat
    fi
    if [ "$PV_BIN" != "" ]; then
        pv --progress $DUMPFILE | $CAT_BIN | $COMMAND
    else
        $CAT_BIN $DUMPFILE | $COMMAND
    fi

elif [ "$1" == "db" ] && [ "$2" == "dump" ]; then
    shift 2
    $DOCKER_COMPOSE_EXEC -T $DOCKER_DB_SERVICE mysqldump -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE $@

elif [ "$1" == "db" ]; then
    shift 1
    $DOCKER_COMPOSE_EXEC -it $DOCKER_DB_SERVICE mysql -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE $@

## SHELL
elif [ "$1" == "shell" ]; then
    CONTAINER=$2
    CONTAINER=${CONTAINER:-$DOCKER_PHP_SERVICE}
    shift 2
    has_bash $CONTAINER
    if [ "$?" -eq 0 ]; then
        SHELL_COMMAND=bash
    else
        SHELL_COMMAND=sh
    fi
    $DOCKER_COMPOSE_EXEC -it $CONTAINER $SHELL_COMMAND

## DOCKER COMPOSE
else
    $DOCKER_COMPOSE $@
fi

exit 0
